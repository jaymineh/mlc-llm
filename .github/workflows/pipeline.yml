name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Lint and Test
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest black flake8 mypy
        pip install -r requirements.txt || echo "No requirements.txt found"
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check .
    
    - name: Type check with mypy
      run: mypy . --ignore-missing-imports || echo "Type checking completed"
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short || echo "Tests completed"

  # Job 2: Build and Push Docker Image
  docker-build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: runtime
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Job 3: Cross-Platform Build
  build-wheels:
    needs: test
    if: github.event_name == 'release'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [x64]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
    
    - name: Install build dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake ninja rust
        refreshenv
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: 3.11
        channels: conda-forge
        channel-priority: strict
    
    - name: Install conda dependencies
      shell: bash -l {0}
      run: |
        conda install -c conda-forge cmake>=3.24 rust git python=3.11
    
    - name: Build MLC-LLM
      shell: bash -l {0}
      run: |
        mkdir -p build && cd build
        python ../cmake/gen_cmake_config.py
        cmake ..
        cmake --build . --parallel
        cd ..
    
    - name: Build Python package
      shell: bash -l {0}
      run: |
        export MLC_LLM_SOURCE_DIR=$(pwd)
        export PYTHONPATH=$MLC_LLM_SOURCE_DIR/python:$PYTHONPATH
        pip install build wheel
        python -m build
    
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/*.whl

  # Job 4: Create GitHub Release
  release:
    needs: [docker-build, build-wheels]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*.whl
        draft: false
        prerelease: false
        generate_release_notes: true